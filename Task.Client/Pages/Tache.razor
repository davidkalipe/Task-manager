@page "/tache"
@using Task.Client.Services
@inject TaskService TaskService;
@inject IJSRuntime JRuntime;
@inject ISnackbar Snackbar;

<MudPaper Class="pa-16 mx-10 justify-center" Elevation="2">
    <MudTextField @bind-Value="@task.Name" Label="Titre" Variant="Variant.Outlined"></MudTextField>
    <MudTextField Class="mt-10" @bind-Value="@task.Description" Label="Description" Variant="Variant.Outlined"></MudTextField>
    <MudButton Class="mb- mt-5" Variant="Variant.Filled" Color="Color.Primary" @onclick="CreateTask">Ajouter</MudButton>
    <MudText Typo="Typo.h4" Class="my-10">Listes des tâches</MudText>
    @if (tasks is null)
    {
        <MudText>Loading...</MudText>
    }
    else
    {
        <MudSimpleTable Style="overflow-x: auto;">
            <thead>
            <tr>
                <th>Title</th>
                <th>Description</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var task in tasks)
            {
                <tr>
                    <td>@task.Name</td>
                    <td>@task.Description</td>
                </tr>
            }
            </tbody>
        </MudSimpleTable>
    }
</MudPaper>

@code {
    [Inject] private IDialogService DialogService { get; set; }
    private List<Models.Task>? tasks = new List<Models.Task>();
    private Models.Task task = new Models.Task();
    private bool falseFavorite { get; set; } = false;
    private bool trueFavorite { get; set; } = true;
    
    protected override async Task OnInitializedAsync()
    {
        tasks = await TaskService.GetAllTask();
        if (task.Favorite == false)
        {
            task.Favorite = falseFavorite;
        }

        if (task.Favorite == true)
        {
            task.Favorite = trueFavorite;
        }
    }

    private async Task CreateTask()
    {
        var result = await DialogService.ShowMessageBox("Confirm",
            "Ajouter la tâche?",
            yesText: "Oui, ajouter",
            cancelText: "Annuler");

        if (result == true)
        {
            var taskAdd = await TaskService.Createtask(task);
            if (taskAdd is not null)
            {
                tasks.Add(taskAdd);
                task = new Models.Task();
            }
            
        }
    }

}